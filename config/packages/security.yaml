security:

    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:                                  # le nom du provider
            entity:                                         # le type de provider
                class: App\Entity\User                      # la classe User est le fournisseur d'utilisateur
                property: email                             # l'attribut qui sert d'identifiant

    role_hierarchy:
        # Un admin hérite des droits d'auteur et de modérateur
        ROLE_ADMIN: [ROLE_AUTEUR, ROLE_MODERATEUR]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    firewalls:
        dev:                                                # nom du pare-feu
            pattern: ^/(_(profiler|wdt)|css|images|js)/     # l'URL de la tool bar et tous les url /css/.., /js/.. et /images/.. seront actif et protéger par le par feu dev
            security: false                                 # la securité est désactiver
        main:                               # nom du pare-feu, on peut mettre n'importe quel nom
            anonymous: lazy                 # accepte les utilisateurs annonymes
            provider: app_user_provider     # va chercher le provider app_user_provider pour fournir les utilisateurs au pare-feu main            //users_in_memory
            pattern: ^/                     # Toutes les URL commencent par '/'
            form_login:                     # Authentification via un formulaire HTML
                login_path: login           # Route du fourmulaire de connexion, la route est ecrit un valeur donc c'est /login
            #    check_path: login_check     # Route de validation du formulaire
            logout:                         # Rendre possible la déconnexion
                path: app_logout            # Nom de la route de déconnexion qui est dans le SecurityController
                target: app_login           # Nom de la route (qui est dans le SecurityController) vers laquelle sera redirigé le visiteur après sa déconnexion 
        
        #admin:
        #    pattern: ^/admin
        #    form_login:
        #        login_path: admin/login
        #    logout:
        #        path: admin_logout
        #        target: admin_login    

            # tous le guard et logout sont arriver grace a bin/console make:auth
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator

            # Normalement sous symfony 3,on écrit les routes du login et logout dans config/routing.yaml 
            # et génére le userBundle via php bin/console generate:bundle mais on ne fait plus ça sur symfony 4
            # on fait composer require symfony/security-bundle et  php bin/console make:user et  php bin/console make:auth maintenant


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin/inscription, roles:  }
         - { path: ^/admin/login, roles:  }
         - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }




# ///////////////////// E X P L I CA T I O N ////////////////////////

    # un encodeur est un objet qui encode le mot de passe des utilisateurs
    #encoders:



    # Le Role est au centre du processus d'autorisation, si un utilisateur tente
    # d'acceder a une page, le controlleur d'accès vérifie s'il dispose du ou des role
    # requis pour la page. Si c'est le cas l'accès est autoriser, sinon l'accès est refusé
    #
    # Le rôle ROLE_USER est compris dans le role ROLE_ADMIN, ça veut dire que 
    # si une page require le ROLE_USER, et qu'un utilisateur disposant du ROLE_ADMIN
    # tente d'y accéder, il sera autorisé, car en disposant du ROLE_ADMIN , il dispose aussi du ROLE_USER
    #
    #role_hierarchy:
    #    ROLE_ADMIN: ROLE_USER
    #    ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]



    # Un provider est un fournisseur d'utilisateurs, les firewalls (pare-feu)
    #s'adressent aux providers pour récupérer les utilisateurs et les identifier
    #
    #providers:



    # Un firewall (pare-feu) cherche à vérifier que vous êtes bien celui que vous 
    # prétendez être. ici , seul le pare-feu dev est défini
    #
    #firewalls:
    #    dev:
    #        pattern: ^/(_(profiler|wdt)|css|images|js)/
    #        security: false



    # le contrôle d'accès, va s'occuper de déterminer si le visiteur a les bons droits (rôles)
    # pour accéder à la ressource demandée
    #
    # toutes les URL qui correspondent au path(ici, toutes celles qui commencent par/admin) requièrent le rôle ROLE_ADMIN.
    # C'est une méthode complémentaire des autres. Elle permet également de sécuriser vos URL par IP ou par canal (http ou https),
    # grâce à des options :
    #
    #
    #access_control:
    #   - { path: ^/admin, ip: 127.0.0.1, requires_channel: https }